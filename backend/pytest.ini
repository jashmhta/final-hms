[tool:pytest]
DJANGO_SETTINGS_MODULE = hms.settings_test
python_files = tests.py test_*.py *_tests.py
python_classes = Test*
python_functions = test_*
testpaths = tests
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=.
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml
    --cov-fail-under=95
    --junit-xml=junit-report.xml
    --html=pytest-report.html
    --self-contained-html
    --metadata=PYTEST_XDIST_WORKER_COUNT
    --capture=sys
    --show-capture=no

markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    performance: Performance tests
    security: Security tests
    accessibility: Accessibility tests
    compliance: Healthcare compliance tests
    slow: Slow tests
    fast: Fast tests
    smoke: Smoke tests
    regression: Regression tests
    feature: Feature tests
    api: API tests
    database: Database tests
    frontend: Frontend tests
    backend: Backend tests
    mobile: Mobile tests
    contract: Contract tests
    load: Load tests
    stress: Stress tests
    security: Security tests
    vulnerability: Vulnerability tests
    hipaa: HIPAA compliance tests
    gdpr: GDPR compliance tests
    wcag: WCAG compliance tests
    visual: Visual regression tests

minversion = 6.0
cache_dir = .pytest_cache
console_output_style = progress
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    ignore::RuntimeWarning
    ignore::ImportWarning

asyncio_mode = auto

# Performance testing
benchmark_disable = true
benchmark_only = false
benchmark_sort = mean
benchmark_time_unit = second
benchmark_min_rounds = 5
benchmark_max_time = 1.0
benchmark_disable_gc = false
benchmark_timer = time.perf_counter

# Parallel execution
numprocesses = auto
dist = loadscope
maxschedchunk = 1

# Test discovery
norecursedirs = .git .tox dist build *.egg venv env migrations static media node_modules .pytest_cache .coverage htmlcov

# Test data generation
faker_seed = 12345
randomly_seed = 12345

# Test isolation
usefixtures = django_db_setup
django_debug_mode = false
django_use_existing_database = false

# Test reporting
json_report = true
json_report_file = pytest-report.json
metadata = {"PYTHON_VERSION": "3.12", "DJANGO_VERSION": "4.2", "TEST_FRAMEWORK": "pytest"}
