[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "hms-enterprise-grade"
version = "1.0.0"
description = "Enterprise-Grade Healthcare Management System"
authors = [
    {name = "HMS Enterprise Team", email = "team@hms-enterprise.com"},
]
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: Django",
    "Framework :: Django :: 4.0",
    "Intended Audience :: Healthcare Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Medical :: Health Records",
    "Topic :: Office/Business :: Scheduling",
]
dependencies = [
    "Django>=4.0.0",
    "djangorestframework>=3.14.0",
    "django-cors-headers>=4.0.0",
    "django-environ>=0.9.0",
    "psycopg2-binary>=2.9.0",
    "redis>=4.0.0",
    "celery>=5.2.0",
    "django-redis>=5.3.0",
    "Pillow>=9.0.0",
    "python-dotenv>=0.19.0",
    "cryptography>=3.4.0",
    "pyjwt>=2.4.0",
    "requests>=2.28.0",
    "pandas>=1.5.0",
    "numpy>=1.21.0",
    "openpyxl>=3.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.6.0",
    "factory-boy>=3.2.0",
    "black>=22.0.0",
    "flake8>=5.0.0",
    "isort>=5.10.0",
    "mypy>=0.991",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pylint>=2.15.0",
    "pre-commit>=2.20.0",
    "django-stubs>=1.12.0",
    "djangorestframework-stubs>=1.7.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-django>=4.5.0",
    "pytest-cov>=4.0.0",
    "pytest-mock>=3.6.0",
    "factory-boy>=3.2.0",
    "coverage>=7.0.0",
]
lint = [
    "black>=22.0.0",
    "flake8>=5.0.0",
    "isort>=5.10.0",
    "mypy>=0.991",
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "pylint>=2.15.0",
]
security = [
    "bandit>=1.7.0",
    "safety>=2.0.0",
    "semgrep>=1.0.0",
]

[project.urls]
Homepage = "https://github.com/hms-enterprise/hms-enterprise-grade"
Documentation = "https://hms-enterprise-grade.readthedocs.io"
Repository = "https://github.com/hms-enterprise/hms-enterprise-grade"
Issues = "https://github.com/hms-enterprise/hms-enterprise-grade/issues"

[project.scripts]
hms-manage = "backend.manage:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["backend*"]
exclude = ["tests*"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--verbose",
    "--cov=backend",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=95",
]
testpaths = ["backend/tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "api: marks tests as API tests",
    "database: marks tests as database tests",
    "security: marks tests as security tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["backend"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/migrations/*",
    "*/management/commands/*",
    "*/settings.py",
    "*/wsgi.py",
    "*/asgi.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = ["tests", "migrations", "node_modules", "venv"]
skips = ["B101", "B601"]

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
src_paths = ["backend", "services"]
known_django = "django"
known_first_party = ["backend", "services"]
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "DJANGO", "FIRSTPARTY", "LOCALFOLDER"]