# HMS Enterprise-Grade Dockerfile - Production Optimized
ARG PYTHON_VERSION=3.12-slim
FROM python:${PYTHON_VERSION} as base

# Set environment variables
ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1 \
    PIP_DEFAULT_TIMEOUT=100 \
    POETRY_VERSION=1.8.2 \
    POETRY_HOME="/opt/poetry" \
    POETRY_VIRTUALENVS_IN_PROJECT=true \
    POETRY_NO_INTERACTION=1

# Install system dependencies and Poetry
RUN apt-get update -y && \
    apt-get install -y --no-install-recommends \
        build-essential \
        libpq-dev \
        python3-dev \
        libffi-dev \
        libssl-dev \
        libxml2-dev \
        libxslt1-dev \
        zlib1g-dev \
        libjpeg-dev \
        libfreetype6-dev \
        liblcms2-dev \
        libwebp-dev \
        tcl8.6-dev \
        tk8.6-dev \
        python3-tk \
        gettext \
        curl \
        gnupg2 \
        ca-certificates \
        && rm -rf /var/lib/apt/lists/*

# Install Poetry
RUN curl -sSL https://install.python-poetry.org | python3 - && \
    chmod +x /opt/poetry/bin/poetry && \
    ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry

# Create non-root user
RUN groupadd -r appuser && useradd -r -g appuser appuser

# Build stage
FROM base as builder

WORKDIR /app

# Copy dependency files
COPY pyproject.toml poetry.lock* ./

# Install dependencies
RUN poetry install --only=main --no-dev && \
    poetry run pip freeze > /tmp/requirements.txt

# Production stage
FROM base as production

# Copy virtual environment from builder
COPY --from=builder /opt/poetry /opt/poetry
COPY --from=builder /app/.venv /app/.venv
COPY --from=builder /tmp/requirements.txt /tmp/requirements.txt

# Install runtime dependencies
RUN pip install --no-cache-dir -r /tmp/requirements.txt && \
    rm /tmp/requirements.txt

WORKDIR /app

# Copy application code
COPY backend/ .

# Copy libraries
RUN cp -r libs/* /usr/local/lib/python3.12/site-packages/

# Create directories
RUN mkdir -p /app/static /app/media /app/logs /app/backups && \
    chown -R appuser:appuser /app

# Set environment variables
ENV DJANGO_SETTINGS_MODULE=hms.settings.production \
    PYTHONPATH=/app \
    PATH="/app/.venv/bin:$PATH"

# Collect static files
RUN python manage.py collectstatic --noinput --clear

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8000/health/ || exit 1

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8000

# Startup script
COPY devops/docker/backend-entrypoint.sh /entrypoint.sh
RUN chmod +x /entrypoint.sh

CMD ["/entrypoint.sh"]