apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: hms
  labels:
    app: backend
    app.kubernetes.io/name: backend
    app.kubernetes.io/component: application
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        app.kubernetes.io/name: backend
        app.kubernetes.io/component: application
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        prometheus.io/scheme: "http"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: hms/backend:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        envFrom:
        - configMapRef:
            name: hms-config
        - secretRef:
            name: hms-secrets
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        volumeMounts:
        - name: static-files
          mountPath: /app/static
        - name: media-files
          mountPath: /app/media
        - name: logs
          mountPath: /app/logs
        - name: ssh-keys
          mountPath: /app/keys
          readOnly: true
        livenessProbe:
          httpGet:
            path: /health/
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/
            port: 8000
            scheme: HTTP
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
            - ALL
      - name: fluentd
        image: fluent/fluentd:v1.16-1
        env:
        - name: FLUENTD_CONF
          value: fluent.conf
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: fluentd-config
          mountPath: /fluentd/etc
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: static-files
        persistentVolumeClaim:
          claimName: backend-static-pvc
      - name: media-files
        persistentVolumeClaim:
          claimName: backend-media-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: backend-logs-pvc
      - name: ssh-keys
        secret:
          secretName: backend-ssh-keys
          defaultMode: 0600
      - name: fluentd-config
        configMap:
          name: fluentd-config
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - backend
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "application"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"