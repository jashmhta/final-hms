import json
import os
import re
from datetime import datetime
from typing import Dict, List, Any
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.graph_objects as go
from plotly.subplots import make_subplots
class VulnerabilityAssessment:
    def __init__(self):
        self.vulnerabilities = []
        self.severity_scores = {
            'critical': 10,
            'high': 8,
            'medium': 5,
            'low': 2,
            'info': 1
        }
    def load_snyk_report(self, file_path: str) -> List[Dict]:
        vulnerabilities = []
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
            if isinstance(data, dict) and 'vulnerabilities' in data:
                for vuln in data['vulnerabilities']:
                    vulnerabilities.append({
                        'scanner': 'Snyk',
                        'severity': vuln.get('severity', 'unknown'),
                        'package': vuln.get('package', ''),
                        'version': vuln.get('version', ''),
                        'title': vuln.get('title', ''),
                        'description': vuln.get('description', ''),
                        'cve': vuln.get('identifiers', {}).get('CVE', [''])[0],
                        'cvss_score': vuln.get('cvssScore', 0),
                        'fix_available': vuln.get('fixAvailable', False),
                        'remediation': vuln.get('remediation', '')
                    })
        except Exception as e:
            print(f"Error loading Snyk report: {e}")
        return vulnerabilities
    def load_bandit_report(self, file_path: str) -> List[Dict]:
        vulnerabilities = []
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
            if isinstance(data, dict) and 'results' in data:
                for result in data['results']:
                    test_id = result.get('test_id', '')
                    issue_text = result.get('issue_text', '')
                    line_number = result.get('line_number', 0)
                    severity_map = {
                        'B201': 'medium',
                        'B301': 'high',
                        'B601': 'high',
                        'B602': 'critical',
                        'B603': 'high',
                        'B604': 'medium',
                        'B605': 'high',
                        'B606': 'medium',
                        'B607': 'high'
                    }
                    severity = severity_map.get(test_id, 'medium')
                    vulnerabilities.append({
                        'scanner': 'Bandit',
                        'severity': severity,
                        'package': f"Code at line {line_number}",
                        'version': '',
                        'title': f"{test_id}: {issue_text}",
                        'description': result.get('code', ''),
                        'cve': '',
                        'cvss_score': self.severity_scores.get(severity, 5),
                        'fix_available': True,
                        'remediation': result.get('more_info', '')
                    })
        except Exception as e:
            print(f"Error loading Bandit report: {e}")
        return vulnerabilities
    def load_semgrep_report(self, file_path: str) -> List[Dict]:
        vulnerabilities = []
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
            if isinstance(data, dict) and 'results' in data:
                for result in data['results']:
                    check_id = result.get('check_id', '')
                    message = result.get('message', '')
                    if 'dangerous' in check_id.lower() or 'injection' in check_id.lower():
                        severity = 'high'
                    elif 'weak' in check_id.lower():
                        severity = 'medium'
                    else:
                        severity = 'low'
                    vulnerabilities.append({
                        'scanner': 'Semgrep',
                        'severity': severity,
                        'package': result.get('path', ''),
                        'version': '',
                        'title': f"{check_id}: {message}",
                        'description': result.get('extra', {}).get('message', ''),
                        'cve': '',
                        'cvss_score': self.severity_scores.get(severity, 3),
                        'fix_available': True,
                        'remediation': result.get('extra', {}).get('fix', '')
                    })
        except Exception as e:
            print(f"Error loading Semgrep report: {e}")
        return vulnerabilities
    def load_safety_report(self, file_path: str) -> List[Dict]:
        vulnerabilities = []
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
            if isinstance(data, list):
                for vuln in data:
                    vulnerabilities.append({
                        'scanner': 'Safety',
                        'severity': vuln.get('severity', 'medium'),
                        'package': vuln.get('package', ''),
                        'version': vuln.get('installed_version', ''),
                        'title': f"{vuln.get('id', '')}: {vuln.get('advisory', '')}",
                        'description': vuln.get('description', ''),
                        'cve': vuln.get('cve', ''),
                        'cvss_score': self.severity_scores.get(vuln.get('severity', 'medium'), 5),
                        'fix_available': vuln.get('fixed_version', '') != '',
                        'remediation': f"Update to version: {vuln.get('fixed_version', 'latest')}"
                    })
        except Exception as e:
            print(f"Error loading Safety report: {e}")
        return vulnerabilities
    def aggregate_vulnerabilities(self) -> pd.DataFrame:
        all_vulnerabilities = []
        report_files = {
            'snyk': 'snyk-report.json',
            'bandit': 'bandit-report.json',
            'semgrep': 'semgrep-report.json',
            'safety': 'safety-report.json'
        }
        loaders = {
            'snyk': self.load_snyk_report,
            'bandit': self.load_bandit_report,
            'semgrep': self.load_semgrep_report,
            'safety': self.load_safety_report
        }
        for scanner, file_path in report_files.items():
            if os.path.exists(file_path):
                try:
                    vulns = loaders[scanner](file_path)
                    all_vulnerabilities.extend(vulns)
                except Exception as e:
                    print(f"Error processing {scanner} report: {e}")
        return pd.DataFrame(all_vulnerabilities)
    def calculate_risk_score(self, df: pd.DataFrame) -> pd.DataFrame:
        df['risk_score'] = df['cvss_score'] * df['severity'].map(self.severity_scores)
        return df
    def generate_summary_statistics(self, df: pd.DataFrame) -> Dict[str, Any]:
        if df.empty:
            return {'total_vulnerabilities': 0}
        summary = {
            'total_vulnerabilities': len(df),
            'by_severity': df['severity'].value_counts().to_dict(),
            'by_scanner': df['scanner'].value_counts().to_dict(),
            'critical_vulnerabilities': len(df[df['severity'] == 'critical']),
            'high_vulnerabilities': len(df[df['severity'] == 'high']),
            'fixable_vulnerabilities': len(df[df['fix_available'] == True]),
            'packages_affected': df['package'].nunique(),
            'average_cvss_score': df['cvss_score'].mean(),
            'max_cvss_score': df['cvss_score'].max()
        }
        return summary
    def create_visualizations(self, df: pd.DataFrame, output_dir: str = '.'):
        if df.empty:
            return
        os.makedirs(output_dir, exist_ok=True)
        plt.figure(figsize=(10, 6))
        severity_counts = df['severity'].value_counts()
        colors = ['
        plt.pie(severity_counts.values, labels=severity_counts.index, autopct='%1.1f%%', colors=colors)
        plt.title('Vulnerability Severity Distribution')
        plt.savefig(os.path.join(output_dir, 'severity_distribution.png'))
        plt.close()
        plt.figure(figsize=(12, 6))
        scanner_counts = df['scanner'].value_counts()
        sns.barplot(x=scanner_counts.index, y=scanner_counts.values)
        plt.title('Vulnerabilities Detected by Scanner')
        plt.xlabel('Scanner')
        plt.ylabel('Number of Vulnerabilities')
        plt.xticks(rotation=45)
        plt.tight_layout()
        plt.savefig(os.path.join(output_dir, 'scanner_comparison.png'))
        plt.close()
        plt.figure(figsize=(10, 6))
        sns.histplot(data=df, x='cvss_score', bins=20, kde=True)
        plt.title('CVSS Score Distribution')
        plt.xlabel('CVSS Score')
        plt.ylabel('Frequency')
        plt.savefig(os.path.join(output_dir, 'cvss_distribution.png'))
        plt.close()
    def generate_html_report(self, df: pd.DataFrame, summary: Dict[str, Any]) -> str:
        html_template = 
        vulnerability_rows = ""
        for _, row in df.iterrows():
            row_html = f
            vulnerability_rows += row_html
        medium_count = summary['by_severity'].get('medium', 0)
        low_count = summary['by_severity'].get('low', 0)
        return html_template.format(
            timestamp=datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            total_vulnerabilities=summary['total_vulnerabilities'],
            critical_vulnerabilities=summary['critical_vulnerabilities'],
            high_vulnerabilities=summary['high_vulnerabilities'],
            medium_vulnerabilities=medium_count,
            low_vulnerabilities=low_count,
            fixable_vulnerabilities=summary['fixable_vulnerabilities'],
            packages_affected=summary['packages_affected'],
            average_cvss_score=summary['average_cvss_score'],
            vulnerability_rows=vulnerability_rows
        )
    def generate_assessment_report(self, output_file: str = 'vulnerability-assessment-report.html'):
        print("Loading vulnerability data from security scanners...")
        df = self.aggregate_vulnerabilities()
        if df.empty:
            print("No vulnerabilities found in reports")
            return
        df = self.calculate_risk_score(df)
        summary = self.generate_summary_statistics(df)
        print("Creating visualizations...")
        self.create_visualizations(df)
        print("Generating HTML report...")
        html_content = self.generate_html_report(df, summary)
        with open(output_file, 'w') as f:
            f.write(html_content)
        print(f"Vulnerability assessment report generated: {output_file}")
        self.generate_pr_summary(summary, df)
    def generate_pr_summary(self, summary: Dict[str, Any], df: pd.DataFrame):
        markdown_summary = f
        with open('security-summary.md', 'w') as f:
            f.write(markdown_summary)
def main():
    assessor = VulnerabilityAssessment()
    assessor.generate_assessment_report()
if __name__ == "__main__":
    main()