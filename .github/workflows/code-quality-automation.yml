name: Code Quality Automation
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 1 * * *'  
  workflow_dispatch:
jobs:
  code-quality-metrics:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install radon lizard mccabe pyflakes pylint pandas matplotlib seaborn
    - name: Run Code Complexity Analysis
      run: |
        radon cc . -a -nb -o complexity-report.json
        lizard . --csv > lizard-report.csv
        python .github/scripts/complexity_analysis.py
    - name: Run Code Quality Metrics
      run: |
        pylint --output-format=json . > pylint-report.json || true
        pyflakes . > pyflakes-report.txt || true
        python .github/scripts/quality_metrics_analysis.py
    - name: Generate Quality Dashboard
      run: |
        python .github/scripts/quality_dashboard.py
    - name: Upload Quality Reports
      uses: actions/upload-artifact@v3
      with:
        name: code-quality-reports
        path: |
          complexity-report.json
          lizard-report.csv
          pylint-report.json
          pyflakes-report.txt
          quality-dashboard.html
  technical-debt-tracking:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install requirements-parser pandas numpy
    - name: Analyze Technical Debt
      run: |
        python .github/scripts/technical_debt_analysis.py
    - name: Generate Technical Debt Report
      run: |
        python .github/scripts/technical_debt_report.py
    - name: Upload Technical Debt Reports
      uses: actions/upload-artifact@v3
      with:
        name: technical-debt-reports
        path: |
          technical-debt-analysis.json
          technical-debt-report.html
  code-smell-detection:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        detector: [pylint, flake8, bandit, mypy]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pylint flake8 bandit mypy pandas
    - name: Run Code Smell Detection
      run: |
        python .github/scripts/code_smell_detection.py --detector ${{ matrix.detector }}
    - name: Upload Code Smell Reports
      uses: actions/upload-artifact@v3
      with:
        name: code-smell-reports-${{ matrix.detector }}
        path: |
          code-smells-${{ matrix.detector }}.json
          code-smells-${{ matrix.detector }}.html
  code-review-automation:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install astroid pandas numpy gitpython
    - name: Run Automated Code Review
      run: |
        python .github/scripts/automated_code_review.py
    - name: Generate Code Review Report
      run: |
        python .github/scripts/code_review_report.py
    - name: Upload Code Review Reports
      uses: actions/upload-artifact@v3
      with:
        name: code-review-reports
        path: |
          code-review-report.json
          code-review-report.html
  refactoring-suggestions:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install tools
      run: |
        python -m pip install --upgrade pip
        pip install rope refactor pandas numpy
    - name: Generate Refactoring Suggestions
      run: |
        python .github/scripts/refactoring_suggestions.py
    - name: Create Refactoring Issues
      if: github.event_name == 'push'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const suggestions = JSON.parse(fs.readFileSync('refactoring-suggestions.json', 'utf8'));
          for (const suggestion of suggestions.suggestions.slice(0, 5)) {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Refactoring: ${suggestion.title}`,
              body: `
              **File:** ${suggestion.file}
              **Line:** ${suggestion.line}
              **Priority:** ${suggestion.priority}
              ${suggestion.description}
              \`\`\`python
              ${suggestion.suggested_code}
              \`\`\`
              ${suggestion.impact}
              **Automated refactoring suggestion from code quality analysis.**
              `,
              labels: ['refactoring', 'code-quality', 'automated']
            });
          }
    - name: Upload Refactoring Reports
      uses: actions/upload-artifact@v3
      with:
        name: refactoring-suggestions
        path: |
          refactoring-suggestions.json
          refactoring-suggestions.html
  code-coverage-monitoring:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov coverage pandas matplotlib
    - name: Run Tests with Coverage
      run: |
        pytest --cov=. --cov-report=html --cov-report=xml --cov-report=term-missing
    - name: Analyze Coverage Trends
      run: |
        python .github/scripts/coverage_analysis.py
    - name: Generate Coverage Report
      run: |
        python .github/scripts/coverage_dashboard.py
    - name: Upload Coverage Reports
      uses: actions/upload-artifact@v3
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/
          coverage-dashboard.html
          coverage-trends.json
  quality-gate-validation:
    runs-on: ubuntu-latest
    needs: [code-quality-metrics, technical-debt-tracking, code-smell-detection, code-coverage-monitoring]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    - name: Run Quality Gate Validation
      run: |
        python .github/scripts/quality_gate_validation.py
    - name: Generate Quality Summary
      run: |
        python .github/scripts/quality_summary.py
    - name: Comment on PR with Quality Summary
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const path = './quality-summary.md';
          if (fs.existsSync(path)) {
            const summary = fs.readFileSync(path, 'utf8');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: summary
            });
          }
    - name: Fail Build if Quality Gates Not Met
      if: always()
      run: |
        if [ -f "quality-gate-failed" ]; then
          echo "Quality gates not met. Failing build."
          exit 1
        fi
  quality-dashboard-deployment:
    runs-on: ubuntu-latest
    needs: quality-gate-validation
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Download all artifacts
      uses: actions/download-artifact@v3
    - name: Generate Comprehensive Quality Dashboard
      run: |
        python .github/scripts/comprehensive_quality_dashboard.py
    - name: Deploy Quality Dashboard
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./quality-dashboard
        destination_dir: quality-dashboard