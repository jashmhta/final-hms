name: üöÄ Deployment Automation
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - development
        - staging
        - production
      strategy:
        description: 'Deployment strategy'
        required: false
        default: 'blue-green'
        type: choice
        options:
        - blue-green
        - rolling
        - canary
        - recreate
      rollback:
        description: 'Rollback deployment'
        required: false
        default: false
        type: boolean
      version:
        description: 'Version to deploy (leave empty for latest)'
        required: false
        type: string
env:
  PYTHON_VERSION: '3.11'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
jobs:
  deployment-preparation:
    name: üìã Deployment Preparation
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.prep.outputs.environment }}
      strategy: ${{ steps.prep.outputs.strategy }}
      version: ${{ steps.prep.outputs.version }}
      rollback: ${{ steps.prep.outputs.rollback }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Prepare deployment
      id: prep
      run: |
        echo "üìã Preparing deployment configuration..."
        ENVIRONMENT="${{ github.event.inputs.environment }}"
        if [[ -z "$ENVIRONMENT" ]]; then
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT="production"
          else
            ENVIRONMENT="staging"
          fi
        fi
        STRATEGY="${{ github.event.inputs.strategy }}"
        if [[ -z "$STRATEGY" ]]; then
          if [[ "$ENVIRONMENT" == "production" ]]; then
            STRATEGY="blue-green"
          else
            STRATEGY="rolling"
          fi
        fi
        VERSION="${{ github.event.inputs.version }}"
        if [[ -z "$VERSION" ]]; then
          VERSION="${{ github.sha }}"
        fi
        echo "environment=$ENVIRONMENT" >> $GITHUB_OUTPUT
        echo "strategy=$STRATEGY" >> $GITHUB_OUTPUT
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "rollback=${{ github.event.inputs.rollback || false }}" >> $GITHUB_OUTPUT
        echo "‚úÖ Deployment preparation completed"
        echo "  Environment: $ENVIRONMENT"
        echo "  Strategy: $STRATEGY"
        echo "  Version: $VERSION"
  health-checks:
    name: üè• Health Checks
    runs-on: ubuntu-latest
    needs: deployment-preparation
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install health check tools
      run: |
        python -m pip install --upgrade pip
        pip install requests
    - name: Run pre-deployment health checks
      run: |
        echo "üè• Running pre-deployment health checks..."
        python scripts/health_checks.py --environment ${{ needs.deployment-preparation.outputs.environment }}
    - name: Check deployment readiness
      run: |
        echo "‚úÖ Checking deployment readiness..."
        python scripts/check_deployment_readiness.py --environment ${{ needs.deployment-preparation.outputs.environment }}
  deployment-execution:
    name: üöÄ Deployment Execution
    runs-on: ubuntu-latest
    needs: [deployment-preparation, health-checks]
    environment: ${{ needs.deployment-preparation.outputs.environment }}
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Deploy using ${{ needs.deployment-preparation.outputs.strategy }} strategy
      run: |
        echo "üöÄ Deploying using ${{ needs.deployment-preparation.outputs.strategy }} strategy..."
        case "${{ needs.deployment-preparation.outputs.strategy }}" in
          "blue-green")
            python scripts/deploy_blue_green.py \
              --environment ${{ needs.deployment-preparation.outputs.environment }} \
              --version ${{ needs.deployment-preparation.outputs.version }} \
              --rollback ${{ needs.deployment-preparation.outputs.rollback }}
            ;;
          "rolling")
            python scripts/deploy_rolling.py \
              --environment ${{ needs.deployment-preparation.outputs.environment }} \
              --version ${{ needs.deployment-preparation.outputs.version }} \
              --rollback ${{ needs.deployment-preparation.outputs.rollback }}
            ;;
          "canary")
            python scripts/deploy_canary.py \
              --environment ${{ needs.deployment-preparation.outputs.environment }} \
              --version ${{ needs.deployment-preparation.outputs.version }} \
              --rollback ${{ needs.deployment-preparation.outputs.rollback }}
            ;;
          "recreate")
            python scripts/deploy_recreate.py \
              --environment ${{ needs.deployment-preparation.outputs.environment }} \
              --version ${{ needs.deployment-preparation.outputs.version }} \
              --rollback ${{ needs.deployment-preparation.outputs.rollback }}
            ;;
        esac
        echo "‚úÖ Deployment completed successfully"
  post-deployment-validation:
    name: ‚úÖ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: deployment-execution
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install validation tools
      run: |
        python -m pip install --upgrade pip
        pip install requests
    - name: Run post-deployment health checks
      run: |
        echo "‚úÖ Running post-deployment health checks..."
        python scripts/health_checks.py --environment ${{ needs.deployment-preparation.outputs.environment }} --detailed
    - name: Validate application functionality
      run: |
        echo "üîç Validating application functionality..."
        python scripts/validate_functionality.py --environment ${{ needs.deployment-preparation.outputs.environment }}
    - name: Upload validation reports
      uses: actions/upload-artifact@v4
      with:
        name: post-deployment-validation
        path: |
          health-checks.json
          functionality-validation.json
  deployment-notifications:
    name: üì¢ Deployment Notifications
    runs-on: ubuntu-latest
    needs: post-deployment-validation
    if: always()
    steps:
    - name: Send deployment notifications
      run: |
        echo "üì¢ Sending deployment notifications..."
        if [[ "${{ needs.post-deployment-validation.result }}" == "success" ]]; then
          MESSAGE="‚úÖ Deployment to ${{ needs.deployment-preparation.outputs.environment }} completed successfully"
          COLOR="good"
        else
          MESSAGE="‚ùå Deployment to ${{ needs.deployment-preparation.outputs.environment }} failed"
          COLOR="danger"
        fi
        curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"$MESSAGE\"}" \
          ${{ secrets.SLACK_WEBHOOK_URL }}
    - name: Create deployment record
      uses: actions/github-script@v6
      with:
        script: |
          const { context } = require('@actions/github');
          await github.rest.repos.createDeployment({
            owner: context.repo.owner,
            repo: context.repo.repo,
            ref: '${{ github.sha }}',
            environment: '${{ needs.deployment-preparation.outputs.environment }}',
            description: 'Deployment via GitHub Actions',
            required_contexts: [],
            auto_merge: false,
            payload: {
              strategy: '${{ needs.deployment-preparation.outputs.strategy }}',
              version: '${{ needs.deployment-preparation.outputs.version }}'
            }
          });