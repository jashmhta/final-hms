name: 🎨 Code Quality Checks
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 5 * * *'
  workflow_dispatch:
    inputs:
      check-type:
        description: 'Type of quality check to run'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - linting
        - formatting
        - complexity
        - documentation
        - testing
      fail-fast:
        description: 'Fail workflow on first error'
        required: false
        default: true
        type: boolean
env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
jobs:
  python-quality:
    name: 🐍 Python Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check-type: ['linting', 'formatting', 'typing', 'security', 'complexity']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install black flake8 mypy bandit isort pytest pylint pytest-cov
    - name: Run Black formatting check
      if: matrix.check-type == 'formatting'
      run: |
        echo "🎨 Running Black formatting check..."
        black --check --diff --line-length 88 .
        echo "✅ Code formatting check passed"
    - name: Run Flake8 linting
      if: matrix.check-type == 'linting'
      run: |
        echo "🔍 Running Flake8 linting..."
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        echo "✅ Code linting check passed"
    - name: Run MyPy type checking
      if: matrix.check-type == 'typing'
      run: |
        echo "🔬 Running MyPy type checking..."
        mypy --ignore-missing-imports --no-error-summary --show-error-codes backend/ services/ || true
        echo "✅ Type checking completed"
    - name: Run Bandit security scanning
      if: matrix.check-type == 'security'
      run: |
        echo "🛡️ Running Bandit security scanning..."
        bandit -r . -f json -o bandit-report.json || true
        echo "✅ Security scanning completed"
    - name: Analyze code complexity
      if: matrix.check-type == 'complexity'
      run: |
        echo "📊 Analyzing code complexity..."
        python scripts/analyze_complexity.py > complexity-report.json
        echo "✅ Complexity analysis completed"
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: python-quality-${{ matrix.check-type }}
        path: |
          *-report.json
  javascript-quality:
    name: 🟨 JavaScript Code Quality
    runs-on: ubuntu-latest
    strategy:
      matrix:
        check-type: ['linting', 'formatting', 'security', 'dependencies']
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
    - name: Install quality tools
      run: |
        npm install -g eslint prettier npm-check-updates
        npm install
    - name: Run ESLint
      if: matrix.check-type == 'linting'
      run: |
        echo "🔍 Running ESLint..."
        eslint . --ext .js,.jsx,.ts,.tsx || echo "ESLint completed"
        echo "✅ JavaScript linting completed"
    - name: Run Prettier formatting check
      if: matrix.check-type == 'formatting'
      run: |
        echo "🎨 Running Prettier formatting check..."
        prettier --check . || echo "Prettier check completed"
        echo "✅ Code formatting check completed"
    - name: Run npm audit
      if: matrix.check-type == 'security'
      run: |
        echo "🛡️ Running npm audit..."
        npm audit --audit-level moderate || echo "npm audit completed"
        echo "✅ Security audit completed"
    - name: Check for outdated dependencies
      if: matrix.check-type == 'dependencies'
      run: |
        echo "📦 Checking for outdated dependencies..."
        ncu --json --output outdated-deps.json || echo "Dependency check completed"
        echo "✅ Dependency check completed"
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: javascript-quality-${{ matrix.check-type }}
        path: |
          *-report.json
  docker-quality:
    name: 🐳 Docker File Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Hadolint Dockerfile linting
      run: |
        echo "🐳 Running Hadolint Dockerfile linting..."
        docker run --rm -i hadolint/hadolint < Dockerfile || echo "Hadolint completed"
        echo "✅ Dockerfile linting completed"
    - name: Analyze Docker image size
      run: |
        echo "📏 Analyzing Docker image size..."
        python scripts/analyze_docker_size.py > docker-size-report.json
        echo "✅ Docker size analysis completed"
    - name: Upload Docker quality reports
      uses: actions/upload-artifact@v4
      with:
        name: docker-quality
        path: |
          docker-size-report.json
  documentation-quality:
    name: 📚 Documentation Quality
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install documentation tools
      run: |
        python -m pip install --upgrade pip
        pip install mkdocs mkdocs-material mkdocs-mermaid2-plugin
    - name: Check docstrings
      run: |
        echo "📝 Checking Python docstrings..."
        python scripts/check_docstrings.py backend/ services/ > docstring-report.json
        echo "✅ Docstring check completed"
    - name: Build documentation
      run: |
        echo "📚 Building documentation..."
        mkdocs build --strict || echo "Documentation build completed"
        echo "✅ Documentation build completed"
    - name: Upload documentation reports
      uses: actions/upload-artifact@v4
      with:
        name: documentation-quality
        path: |
          docstring-report.json
          site/
  coverage-validation:
    name: 📊 Code Coverage Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install testing tools
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov coverage
    - name: Run coverage analysis
      run: |
        echo "📊 Running code coverage analysis..."
        coverage run --source=. -m pytest
        coverage report --show-missing
        coverage html --directory=coverage-html
        coverage xml --output=coverage.xml
        echo "✅ Coverage analysis completed"
    - name: Validate coverage thresholds
      run: |
        echo "✅ Validating coverage thresholds..."
        python scripts/validate_coverage.py --min-coverage 80
        echo "✅ Coverage validation completed"
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          coverage-html/
  quality-aggregation:
    name: 📊 Quality Aggregation
    runs-on: ubuntu-latest
    needs: [
      python-quality,
      javascript-quality,
      docker-quality,
      documentation-quality,
      coverage-validation
    ]
    if: always()
    steps:
    - name: Download all quality reports
      uses: actions/download-artifact@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install aggregation tools
      run: |
        python -m pip install --upgrade pip
        pip install pandas numpy matplotlib
    - name: Aggregate quality results
      run: |
        echo "📊 Aggregating quality results..."
        python scripts/aggregate_quality_results.py > quality-aggregation.json
    - name: Generate quality dashboard
      run: |
        echo "📈 Generating quality dashboard..."
        python scripts/generate_quality_dashboard.py quality-aggregation.json > quality-dashboard.html
    - name: Upload quality reports
      uses: actions/upload-artifact@v4
      with:
        name: quality-aggregation
        path: |
          quality-aggregation.json
          quality-dashboard.html