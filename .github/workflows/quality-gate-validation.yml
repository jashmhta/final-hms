name: 🎯 Quality Gate Validation
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      gate-type:
        description: 'Quality gate type to validate'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - code-quality
        - testing
        - security
        - performance
        - compliance
        - deployment
      environment:
        description: 'Environment to validate against'
        required: false
        default: 'development'
        type: choice
        options:
        - development
        - staging
        - production
env:
  PYTHON_VERSION: '3.11'
  QUALITY_GATES_FILE: '.github/quality-gates.yml'
jobs:
  quality-gate-validation:
    name: 🎯 Quality Gate Validation
    runs-on: ubuntu-latest
    outputs:
      all-passed: ${{ steps.validation.outputs.all-passed }}
      summary: ${{ steps.validation.outputs.summary }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install validation tools
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml requests
    - name: Load quality gates configuration
      run: |
        echo "📋 Loading quality gates configuration..."
        python scripts/load_quality_gates.py --config ${{ env.QUALITY_GATES_FILE }}
    - name: Validate quality gates
      id: validation
      run: |
        echo "🎯 Validating quality gates..."
        case "${{ github.event.inputs.gate-type }}" in
          "code-quality")
            python scripts/validate_code_quality.py --environment ${{ github.event.inputs.environment }}
            ;;
          "testing")
            python scripts/validate_testing_quality.py --environment ${{ github.event.inputs.environment }}
            ;;
          "security")
            python scripts/validate_security_quality.py --environment ${{ github.event.inputs.environment }}
            ;;
          "performance")
            python scripts/validate_performance_quality.py --environment ${{ github.event.inputs.environment }}
            ;;
          "compliance")
            python scripts/validate_compliance_quality.py --environment ${{ github.event.inputs.environment }}
            ;;
          "deployment")
            python scripts/validate_deployment_quality.py --environment ${{ github.event.inputs.environment }}
            ;;
          *)
            python scripts/validate_all_quality_gates.py --environment ${{ github.event.inputs.environment }}
            ;;
        esac
        if [ $? -eq 0 ]; then
          echo "all-passed=true" >> $GITHUB_OUTPUT
          echo "summary=All quality gates passed successfully" >> $GITHUB_OUTPUT
        else
          echo "all-passed=false" >> $GITHUB_OUTPUT
          echo "summary=Some quality gates failed" >> $GITHUB_OUTPUT
          exit 1
        fi
    - name: Generate quality gate report
      run: |
        echo "📊 Generating quality gate report..."
        python scripts/generate_quality_gate_report.py > quality-gate-report.md
    - name: Upload quality gate report
      uses: actions/upload-artifact@v3
      with:
        name: quality-gate-report
        path: quality-gate-report.md
  quality-gate-enforcement:
    name: 🛡️ Quality Gate Enforcement
    runs-on: ubuntu-latest
    needs: quality-gate-validation
    if: needs.quality-gate-validation.outputs.all-passed == 'false' && github.event_name == 'pull_request'
    steps:
    - name: Enforce quality gates
      run: |
        echo "🛡️ Enforcing quality gates..."
        echo "❌ Quality gates validation failed"
        echo "Please fix the identified issues before merging"
        exit 1
    - name: Comment on PR
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('quality-gate-report.md', 'utf8');
          await github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `
${summary}
Please fix the identified issues before merging this pull request.
🤖 Generated with [Claude Code](https://claude.ai/code)`
          });
    - name: Block merge
      run: |
        echo "🚫 Blocking merge due to failed quality gates"
        exit 1