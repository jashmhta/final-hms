# Patient Service Kubernetes Deployment
# Enterprise-grade microservice deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  name: patient-service
  namespace: hms-system
  labels:
    app: patient-service
    tier: backend
    version: v1.0.0
  annotations:
    description: "Patient Management Service - Handles patient registration, demographics, and records"
    monitoring: "prometheus"
    logging: "elasticsearch"
    networking: "istio"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: patient-service
      tier: backend
  template:
    metadata:
      labels:
        app: patient-service
        tier: backend
        version: v1.0.0
        istio-injection: enabled
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
        sidecar.istio.io/inject: "true"
    spec:
      serviceAccountName: patient-service-sa
      containers:
      - name: patient-service
        image: hms/patient-service:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
          name: http
          protocol: TCP
        env:
        - name: ENVIRONMENT
          valueFrom:
            configMapKeyRef:
              name: hms-config
              key: ENVIRONMENT
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: hms-config
              key: LOG_LEVEL
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: patient-service-secrets
              key: DATABASE_URL
        - name: REDIS_URL
          valueFrom:
            configMapKeyRef:
              name: hms-config
              key: REDIS_URL
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: hms-secrets
              key: REDIS_PASSWORD
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: hms-config
              key: KAFKA_BROKERS
        - name: JWT_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: hms-secrets
              key: JWT_SECRET_KEY
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: hms-secrets
              key: ENCRYPTION_KEY
        - name: JAEGER_AGENT_HOST
          valueFrom:
            configMapKeyRef:
              name: hms-config
              key: JAEGER_AGENT_HOST
        - name: JAEGER_AGENT_PORT
          valueFrom:
            configMapKeyRef:
              name: hms-config
              key: JAEGER_AGENT_PORT
        - name: SERVICE_NAME
          valueFrom:
            configMapKeyRef:
              name: patient-service-config
              key: SERVICE_NAME
        - name: SERVICE_PORT
          valueFrom:
            configMapKeyRef:
              name: patient-service-config
              key: SERVICE_PORT
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: logs
          mountPath: /app/logs
        securityContext:
          runAsUser: 1000
          runAsGroup: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: tmp
        emptyDir: {}
      - name: logs
        emptyDir: {}
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - patient-service
              topologyKey: "kubernetes.io/hostname"
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            preference:
              matchExpressions:
              - key: node-role.kubernetes.io/worker
                operator: In
                values:
                - "true"
      tolerations:
      - key: "dedicated"
        operator: "Equal"
        value: "patient-service"
        effect: "NoSchedule"
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: "kubernetes.io/hostname"
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: patient-service

---
# Patient Service Service Account

apiVersion: v1
kind: ServiceAccount
metadata:
  name: patient-service-sa
  namespace: hms-system
  labels:
    app: patient-service
    tier: backend
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::ACCOUNT_ID:role/patient-service-role"

---
# Patient Service Cluster Role

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: patient-service-role
  namespace: hms-system
  labels:
    app: patient-service
    tier: backend
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "namespaces"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["servicemonitors"]
  verbs: ["get", "list", "watch", "create"]
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]

---
# Patient Service Cluster Role Binding

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: patient-service-binding
  namespace: hms-system
  labels:
    app: patient-service
    tier: backend
subjects:
- kind: ServiceAccount
  name: patient-service-sa
  namespace: hms-system
roleRef:
  kind: ClusterRole
  name: patient-service-role
  apiGroup: rbac.authorization.k8s.io

---
# Patient Service Service

apiVersion: v1
kind: Service
metadata:
  name: patient-service
  namespace: hms-system
  labels:
    app: patient-service
    tier: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-path: "/health"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-port: "8000"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-interval: "10"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-timeout: "5"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-healthy-threshold: "2"
    service.beta.kubernetes.io/aws-load-balancer-healthcheck-unhealthy-threshold: "3"
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: patient-service
    tier: backend

---
# Patient Service Horizontal Pod Autoscaler

apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: patient-service-hpa
  namespace: hms-system
  labels:
    app: patient-service
    tier: backend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: patient-service
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: http_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      selectPolicy: Max

---
# Patient Service Pod Disruption Budget

apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: patient-service-pdb
  namespace: hms-system
  labels:
    app: patient-service
    tier: backend
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: patient-service
      tier: backend

---
# Patient Service Service Monitor (Prometheus)

apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: patient-service-monitor
  namespace: hms-system
  labels:
    app: patient-service
    tier: backend
    monitoring: prometheus
spec:
  selector:
    matchLabels:
      app: patient-service
  endpoints:
  - port: http
    interval: 15s
    path: /metrics
    scheme: http
    metricRelabelings:
    - sourceLabels: [__name__]
      regex: 'flask_.*'
      action: drop
  namespaceSelector:
    matchNames:
    - hms-system