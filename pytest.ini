# HMS Enterprise-Grade System - Pytest Configuration

[pytest]
# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*
python_classes = Test*
python_functions = test_*

# Test execution options
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --cov=.
    --cov-report=term-missing
    --cov-report=html
    --cov-report=xml
    --cov-report=json
    --cov-fail-under=95
    --cov-config=.coveragerc
    --junitxml=test-results.xml
    --html=test-report.html
    --self-contained-html
    --no-header
    --disable-warnings

# Test markers
markers =
    unit: Unit tests
    integration: Integration tests
    e2e: End-to-end tests
    performance: Performance tests
    security: Security tests
    slow: Slow tests
    database: Database tests
    api: API tests
    frontend: Frontend tests
    backend: Backend tests
    healthcare: Healthcare-specific tests
    compliance: Compliance tests
    patient_data: Patient data tests
    medical_records: Medical records tests
    authentication: Authentication tests
    authorization: Authorization tests
    encryption: Encryption tests
    audit: Audit tests
    migration: Migration tests
    regression: Regression tests
    smoke: Smoke tests
    sanity: Sanity tests
    ui: UI tests
    mobile: Mobile tests
    web: Web tests

# Filter warnings
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning
    ignore::RuntimeWarning
    ignore::ImportWarning

# Minimum Python version
minversion = 7.0

# Test execution
console_output_style = count
log_cli = True
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

# Coverage configuration
addopts =
    --cov=.
    --cov-report=term-missing
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=json:coverage.json
    --cov-fail-under=95
    --cov-config=.coveragerc

# Test parallel execution
addopts = -n auto

# Test duration
addopts = --durations=20

# Test ordering
addopts = --dist=loadscope

# Test rerun
addopts = --reruns=2
addopts = --reruns-delay=1

# Test failure handling
addopts = --maxfail=10

# Test collection timeout
addopts = --collect-only

# Test data handling
datafiles = tests/data
markers = data_driven

# Fixture scope
autouse = True
fixture_loop = undefined

# Mock configuration
mock_use_standalone_module = True

# Async test support
asyncio_mode = auto

# Django integration
DJANGO_SETTINGS_MODULE = app.settings
python_files = tests.py test_*.py *_tests.py

# Healthcare-specific configuration
[tool:pytest]
# Healthcare test requirements
healthcare_test_requirements = True
patient_data_anonymization = True
security_clearance_level = 2
compliance_checking = True
audit_trail = True

# Test categories
healthcare_test_categories =
    clinical_workflows
    patient_management
    medical_records
    billing_and_insurance
    pharmacy_management
    laboratory_results
    radiology_reports
    surgical_scheduling
    emergency_care
    chronic_disease_management
    mental_health_services
    rehabilitation_services
    preventive_care
    telemedicine
    health_monitoring
    medication_management
    appointment_scheduling
    discharge_planning
    care_coordination
    health_information_exchange
    population_health_management

# Security requirements
security_requirements =
    hipaa_compliance: true
    gdpr_compliance: true
    pci_dss_compliance: true
    data_encryption: true
    access_control: true
    audit_logging: true
    vulnerability_scanning: true
    penetration_testing: true
    security_awareness_training: true

# Quality requirements
quality_requirements =
    code_coverage: 95
    test_quality_score: 85
    mutation_testing: true
    property_based_testing: true
    contract_testing: true
    integration_testing: true
    end_to_end_testing: true
    performance_testing: true
    load_testing: true
    stress_testing: true
    security_testing: true
    usability_testing: true
    accessibility_testing: true
    compatibility_testing: true
    regression_testing: true
    smoke_testing: true
    sanity_testing: true

# Reporting requirements
reporting_requirements =
    test_execution_report: true
    coverage_report: true
    defect_report: true
    performance_report: true
    security_report: true
    compliance_report: true
    quality_report: true
    risk_assessment_report: true
    audit_trail_report: true
    trend_analysis_report: true
    metric_dashboard: true
    real_time_monitoring: true
    automated_alerts: true
    stakeholder_notifications: true

# Test environment
test_environment =
    development: true
    staging: true
    production: false
    database: postgresql
    redis: true
    elasticsearch: true
    minio: true
    docker: true
    kubernetes: true

# Test data management
test_data_management =
    data_seeding: true
    data_cleanup: true
    data_isolation: true
    data_privacy: true
    data_security: true
    data_compliance: true
    data_anonymization: true
    data_masking: true
    data_encryption: true
    data_backup: true
    data_recovery: true

# Test infrastructure
test_infrastructure =
    test_automation: true
    continuous_integration: true
    continuous_deployment: true
    continuous_testing: true
    test_orchestration: true
    test_parallelization: true
    test_distribution: true
    test_monitoring: true
    test_reporting: true
    test_analytics: true
    test_optimization: true
    test_maintenance: true

# Test metrics
test_metrics =
    test_execution_time: true
    test_pass_rate: true
    test_failure_rate: true
    test_flakiness: true
    test_reliability: true
    test_maintainability: true
    test_efficiency: true
    test_effectiveness: true
    test_coverage: true
    test_quality: true
    test_productivity: true
    test_satisfaction: true

# Test optimization
test_optimization =
    test_parallelization: true
    test_caching: true
    test_prioritization: true
    test_selection: true
    test_execution: true
    test_reporting: true
    test_analysis: true
    test_maintenance: true
    test_improvement: true
    test_innovation: true

# Test innovation
test_innovation =
    ai_driven_testing: true
    machine_learning_testing: true
    predictive_testing: true
    autonomous_testing: true
    intelligent_test_generation: true
    self_healing_tests: true
    adaptive_testing: true
    cognitive_testing: true
    quantum_testing: true
    blockchain_testing: true