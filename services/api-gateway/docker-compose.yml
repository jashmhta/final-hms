# API Gateway Docker Compose Configuration
# Enterprise-grade API Gateway with Kong and supporting services

version: '3.8'

services:
  # Kong API Gateway
  kong:
    image: kong/kong-gateway:3.4.0.0
    container_name: kong-gateway
    environment:
      KONG_DATABASE: "off"
      KONG_DECLARATIVE_CONFIG: /var/lib/kong/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_LISTEN: 0.0.0.0:8002
      KONG_ADMIN_GUI_URL: http://localhost:8002
      KONG_PLUGINS: bundled,cors,rate-limiting,jwt,acl,request-transformer,request-validator,request-size-limiting,prometheus,zipkin,http-log,correlation-id
      KONG_LOG_LEVEL: info
      KONG_ANONYMOUS_REPORTS: "off"
      KONG_VITALS: "on"
      KONG_PORTAL: "on"
      KONG_PORTAL_GUI_HOST: localhost:8003
      KONG_PORTAL_API_URL: http://localhost:8004
    ports:
      - "8000:8000"   # Proxy
      - "8443:8443"   # Proxy SSL
      - "8001:8001"   # Admin API
      - "8444:8444"   # Admin API SSL
      - "8002:8002"   # Admin GUI
      - "8445:8445"   # Admin GUI SSL
      - "8003:8003"   # Developer Portal
      - "8446:8446"   # Developer Portal SSL
      - "8004:8004"   # Developer Portal API
      - "8447:8447"   # Developer Portal API SSL
    volumes:
      - ./kong.yml:/var/lib/kong/kong.yml:ro
    networks:
      - hms-network
    depends_on:
      - postgres
      - redis
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # PostgreSQL for Kong
  postgres:
    image: postgres:15-alpine
    container_name: kong-postgres
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - hms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: unless-stopped

  # Redis for caching and rate limiting
  redis:
    image: redis:7-alpine
    container_name: kong-redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    networks:
      - hms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
    restart: unless-stopped

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - hms-network
    restart: unless-stopped

  # Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin_password
      GF_USERS_ALLOW_SIGN_UP: "false"
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    networks:
      - hms-network
    depends_on:
      - prometheus
    restart: unless-stopped

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: 9411
    ports:
      - "16686:16686"   # UI
      - "14268:14268"   # HTTP collector
      - "9411:9411"     # Zipkin
    networks:
      - hms-network
    restart: unless-stopped

  # Konga for Kong management UI
  konga:
    image: pantsel/konga:latest
    container_name: konga
    environment:
      NODE_ENV: production
      TOKEN_SECRET: konga_token_secret
      DB_ADAPTER: postgres
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong_password
      DB_DATABASE: konga
      KONGA_HOOK_TIMEOUT: 120000
    ports:
      - "1337:1337"
    networks:
      - hms-network
    depends_on:
      - postgres
    restart: unless-stopped

  # Logstash for log aggregation
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logstash/config:/usr/share/logstash/config:ro
    ports:
      - "5044:5044"   # Beats input
      - "8080:8080"   # HTTP input
    networks:
      - hms-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Elasticsearch for log storage
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - hms-network
    restart: unless-stopped

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    networks:
      - hms-network
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Consul for service discovery
  consul:
    image: consul:1.15.0
    container_name: consul
    command: consul agent -dev -client=0.0.0.0
    ports:
      - "8500:8500"   # HTTP API
      - "8600:8600/udp"   # DNS
    volumes:
      - consul_data:/consul/data
    networks:
      - hms-network
    restart: unless-stopped

  # Vault for secrets management
  vault:
    image: vault:1.13.0
    container_name: vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: vault_root_token
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/data
    networks:
      - hms-network
    cap_add:
      - IPC_LOCK
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:
  elasticsearch_data:
  consul_data:
  vault_data:

networks:
  hms-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16