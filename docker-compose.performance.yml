version: '3.8'

services:
  # Primary Database with Read Replicas
  db-primary:
    image: postgres:15
    environment:
      POSTGRES_DB: hms_enterprise
      POSTGRES_USER: hms_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure-postgres-password}
      POSTGRES_REPLICATION_USER: replicator
      POSTGRES_REPLICATION_PASSWORD: ${REPLICATION_PASSWORD:-replication-password}
    command: |
      postgres
      -c wal_level=replica
      -c max_wal_senders=3
      -c max_replication_slots=3
      -c hot_standby=on
      -c shared_buffers=1GB
      -c effective_cache_size=3GB
      -c maintenance_work_mem=256MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=16MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_worker_processes=8
      -c max_parallel_workers_per_gather=4
      -c max_parallel_workers=8
      -c max_parallel_maintenance_workers=4
    volumes:
      - postgres_primary_data:/var/lib/postgresql/data
      - ./scripts/performance/postgres.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hms_user -d hms_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hms-network

  # Read Replica 1
  db-replica-1:
    image: postgres:15
    environment:
      POSTGRES_DB: hms_enterprise
      POSTGRES_USER: hms_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure-postgres-password}
      PGUSER: hms_user
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot_1 --host=db-primary --port=5432
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      -c hot_standby=on
      -c max_connections=200
      "
    volumes:
      - postgres_replica1_data:/var/lib/postgresql/data
    depends_on:
      - db-primary
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hms_user -d hms_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hms-network

  # Read Replica 2
  db-replica-2:
    image: postgres:15
    environment:
      POSTGRES_DB: hms_enterprise
      POSTGRES_USER: hms_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure-postgres-password}
      PGUSER: hms_user
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot_2 --host=db-primary --port=5432
      do
        echo 'Waiting for primary to connect...'
        sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      -c hot_standby=on
      -c max_connections=200
      "
    volumes:
      - postgres_replica2_data:/var/lib/postgresql/data
    depends_on:
      - db-primary
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hms_user -d hms_enterprise"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - hms-network

  # Redis Cluster
  redis-cluster-1:
    image: redis:7-alpine
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes --cluster-announce-ip redis-cluster-1
    volumes:
      - redis_cluster1_data:/data
    ports:
      - "6379:6379"
    networks:
      - hms-network

  redis-cluster-2:
    image: redis:7-alpine
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes --cluster-announce-ip redis-cluster-2
    volumes:
      - redis_cluster2_data:/data
    ports:
      - "6380:6379"
    networks:
      - hms-network

  redis-cluster-3:
    image: redis:7-alpine
    command: redis-server --port 6379 --cluster-enabled yes --cluster-config-file nodes.conf --cluster-node-timeout 5000 --appendonly yes --cluster-announce-ip redis-cluster-3
    volumes:
      - redis_cluster3_data:/data
    ports:
      - "6381:6379"
    networks:
      - hms-network

  # Redis Cluster Setup
  redis-cluster-setup:
    image: redis:7-alpine
    depends_on:
      - redis-cluster-1
      - redis-cluster-2
      - redis-cluster-3
    command: |
      bash -c "
      sleep 10
      echo 'yes' | redis-cli --cluster create \
        redis-cluster-1:6379 \
        redis-cluster-2:6379 \
        redis-cluster-3:6379 \
        --cluster-replicas 0
      "
    networks:
      - hms-network

  # Load Balancer
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend-1
      - backend-2
      - backend-3
    networks:
      - hms-network

  # Backend Services (Scaled)
  backend-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - DB_HOST=db-primary
      - DB_PORT=5432
      - DB_NAME=hms_enterprise
      - DB_USER=hms_user
      - DB_PASSWORD=${DB_PASSWORD:-secure-postgres-password}
      - DB_READ_REPLICAS=db-replica-1:5432,db-replica-2:5432
      - REDIS_CLUSTER=redis-cluster-1:6379,redis-cluster-2:6379,redis-cluster-3:6379
      - REDIS_SENTINEL_PORT=26379
      - CELERY_BROKER_URL=redis://redis-cluster-1:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-cluster-1:6379/0
      - DATABASE_POOL_SIZE=50
      - DATABASE_MAX_OVERFLOW=100
      - DATABASE_POOL_TIMEOUT=30
      - DATABASE_POOL_RECYCLE=3600
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 --keep-alive 5 --max-requests 1000 --max-requests-jitter 100
    depends_on:
      db-primary:
        condition: service_healthy
      redis-cluster-1:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - hms-network

  backend-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - DB_HOST=db-primary
      - DB_PORT=5432
      - DB_NAME=hms_enterprise
      - DB_USER=hms_user
      - DB_PASSWORD=${DB_PASSWORD:-secure-postgres-password}
      - DB_READ_REPLICAS=db-replica-1:6379,db-replica-2:6379
      - REDIS_CLUSTER=redis-cluster-1:6379,redis-cluster-2:6379,redis-cluster-3:6379
      - REDIS_SENTINEL_PORT=26379
      - CELERY_BROKER_URL=redis://redis-cluster-1:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-cluster-1:6379/0
      - DATABASE_POOL_SIZE=50
      - DATABASE_MAX_OVERFLOW=100
      - DATABASE_POOL_TIMEOUT=30
      - DATABASE_POOL_RECYCLE=3600
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 --keep-alive 5 --max-requests 1000 --max-requests-jitter 100
    depends_on:
      db-primary:
        condition: service_healthy
      redis-cluster-1:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - hms-network

  backend-3:
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      - DEBUG=False
      - DB_HOST=db-primary
      - DB_PORT=5432
      - DB_NAME=hms_enterprise
      - DB_USER=hms_user
      - DB_PASSWORD=${DB_PASSWORD:-secure-postgres-password}
      - DB_READ_REPLICAS=db-replica-1:6379,db-replica-2:6379
      - REDIS_CLUSTER=redis-cluster-1:6379,redis-cluster-2:6379,redis-cluster-3:6379
      - REDIS_SENTINEL_PORT=26379
      - CELERY_BROKER_URL=redis://redis-cluster-1:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-cluster-1:6379/0
      - DATABASE_POOL_SIZE=50
      - DATABASE_MAX_OVERFLOW=100
      - DATABASE_POOL_TIMEOUT=30
      - DATABASE_POOL_RECYCLE=3600
    volumes:
      - ./backend:/app
      - ./logs:/app/logs
    command: gunicorn backend.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2 --timeout 120 --keep-alive 5 --max-requests 1000 --max-requests-jitter 100
    depends_on:
      db-primary:
        condition: service_healthy
      redis-cluster-1:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '1.0'
          memory: 2G
    networks:
      - hms-network

  # Celery Workers for async tasks
  celery-worker-1:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A backend worker --loglevel=info --concurrency=8 --max-tasks-per-child=1000 --time-limit=3600
    environment:
      - DEBUG=False
      - DB_HOST=db-primary
      - DB_NAME=hms_enterprise
      - DB_USER=hms_user
      - DB_PASSWORD=${DB_PASSWORD:-secure-postgres-password}
      - CELERY_BROKER_URL=redis://redis-cluster-1:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-cluster-1:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - redis-cluster-1
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    networks:
      - hms-network

  celery-worker-2:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A backend worker --loglevel=info --concurrency=8 --max-tasks-per-child=1000 --time-limit=3600
    environment:
      - DEBUG=False
      - DB_HOST=db-primary
      - DB_NAME=hms_enterprise
      - DB_USER=hms_user
      - DB_PASSWORD=${DB_PASSWORD:-secure-postgres-password}
      - CELERY_BROKER_URL=redis://redis-cluster-1:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-cluster-1:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - redis-cluster-1
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
    networks:
      - hms-network

  # Celery Beat for scheduled tasks
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    command: celery -A backend beat --loglevel=info --scheduler=django_celery_beat.schedulers:DatabaseScheduler
    environment:
      - DEBUG=False
      - DB_HOST=db-primary
      - DB_NAME=hms_enterprise
      - DB_USER=hms_user
      - DB_PASSWORD=${DB_PASSWORD:-secure-postgres-password}
      - CELERY_BROKER_URL=redis://redis-cluster-1:6379/0
      - CELERY_RESULT_BACKEND=redis://redis-cluster-1:6379/0
    volumes:
      - ./backend:/app
    depends_on:
      - redis-cluster-1
    networks:
      - hms-network

  # Flower for Celery monitoring
  flower:
    image: mher/flower:0.9.7
    environment:
      - CELERY_BROKER_URL=redis://redis-cluster-1:6379/0
      - FLOWER_PORT=5555
    ports:
      - "5555:5555"
    depends_on:
      - redis-cluster-1
    networks:
      - hms-network

volumes:
  postgres_primary_data:
  postgres_replica1_data:
  postgres_replica2_data:
  redis_cluster1_data:
  redis_cluster2_data:
  redis_cluster3_data:

networks:
  hms-network:
    driver: bridge